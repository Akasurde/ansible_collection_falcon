---
- block:
  - name: CrowdStrike Falcon | Set default sensor name
    ansible.builtin.set_fact:
      installed_sensor: falcon-sensor
    when:
      - ansible_pkg_mgr in linux_packagers

  - name: CrowdStrike Falcon | Set default sensor name for non-Windows installations
    ansible.builtin.set_fact:
      falcon_sensor_pkg: "{{ installed_sensor }}"
    when:
      - ansible_pkg_mgr in linux_packagers
      - falcon_sensor_download is not defined

  - name: CrowdStrike Falcon | Transfer CrowdStrike Falcon RPM GPG key file
    ansible.builtin.copy:
      src: "{{ falcon_gpg_key }}"
      dest: "{{ falcon_install_tmp_dir }}{{ falcon_gpg_key }}"
      mode: 0644
    when:
      - falcon_gpg_key_check

  - name: CrowdStrike Falcon | Import CrowdStrike Falcon RPM GPG key from file
    ansible.builtin.rpm_key:
      state: present
      key: '{{ falcon_install_tmp_dir }}{{ falcon_gpg_key }}'
    when:
      - falcon_gpg_key_check
      - ansible_pkg_mgr in rpm_packagers

  - name: CrowdStrike Falcon | Import CrowdStrike Falcon APT GPG key from file
    ansible.builtin.apt_key:
      file: '{{ falcon_install_tmp_dir }}{{ falcon_gpg_key }}'
      state: present
    when:
      - falcon_gpg_key_check
      - ansible_pkg_mgr in dpkg_packagers

  - name: CrowdStrike Falcon | Install Falcon Sensor Package (Linux)
    ansible.builtin.package:
      deb: "{{ falcon_sensor_pkg if (ansible_pkg_mgr in dpkg_packagers) else omit }}"
      name: "{{ falcon_sensor_pkg if (ansible_pkg_mgr in rpm_packagers) else omit }}"
      state: present
    when:
      - ansible_pkg_mgr in linux_packagers

  - name: CrowdStrike Falcon | Install Falcon Sensor .pkg Package (macOS)
    ansible.builtin.command: "/usr/sbin/installer -pkg {{ falcon_sensor_pkg }} -target /"
    args:
      creates: "/Applications/Falcon.app/Contents/Resources/falconctl"
    when:
      - ansible_distribution == "MacOSX"

  - name: CrowdStrike Falcon | Verify Falcon Package Is Installed
    ansible.builtin.package_facts:
      manager: auto
    when: ansible_distribution != "MacOSX"

  - name: CrowdStrike Falcon | Remove tmp install directory
    ansible.builtin.file:
      path: "{{ falcon_install_temp_directory.path }}"
      state: absent
    when: falcon_install_temp_directory.path is defined
    changed_when: no

  - name: CrowdStrike Falcon | Associate Falcon Sensor with your Customer ID (CID) (Linux)
    crowdstrike.falcon.falconctl:
      cid: "{{ falcon_cid }}"
      state: present
    notify: CrowdStrike Falcon | Restart Falcon Sensor
    when:
      - not falcon_provisioning_token
      - ansible_distribution != "MacOSX"

  - name: CrowdStrike Falcon | Associate Falcon Sensor with your Customer ID (CID) (macOS)
    ansible.builtin.command: "/Applications/Falcon.app/Contents/Resources/falconctl license {{ falcon_cid }}"
    when:
      - not falcon_provisioning_token
      - ansible_distribution == "MacOSX"
      - falcon_already_installed is defined
      - not falcon_already_installed.stat.exists

  - name: CrowdStrike Falcon | Associate Falcon Sensor with your Customer ID (CID) Using Provisioning Token
    crowdstrike.falcon.falconctl:
      cid: "{{ falcon_cid }}"
      provisioning_token: "{{ falcon_provisioning_token }}"
      state: present
    notify: CrowdStrike Falcon | Restart Falcon Sensor
    when:
      - falcon_provisioning_token
      - ansible_distribution != "MacOSX"

  - name: CrowdStrike Falcon Installer | Starting Falcon Sensor Daemon (Linux)
    ansible.builtin.service:
      name: falcon-sensor
      state: "{{ falcon_service_state | default('started') }}"
      enabled: yes
    when:
      - installed_sensor in ansible_facts.packages

  - name: CrowdStrike Falcon | Remove Falcon Agent ID (AID) If Building A Primary Image
    crowdstrike.falcon.falconctl:
      aid: yes
      state: absent
    when:
      - falcon_remove_agent_id
      - ansible_distribution != "MacOSX"

  - name: CrowdStrike Falcon | Starting Falcon Sensor (macOS)
    ansible.builtin.command: "launchctl {{ falcon_service_state | default('start') }} com.crowdstrike.falcond"
    when:
      - ansible_distribution == "MacOSX"
